package mursalin.companion.gobuddy.presentation.viewmodel

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import mursalin.companion.gobuddy.domain.model.Task
import mursalin.companion.gobuddy.domain.use_case.task.AddTaskUseCase
import java.util.*
import javax.inject.Inject

data class AddTaskState(
    val title: String = "",
    val description: String = "",
    val dueDate: Date = Date(),
    val priority: String = "Medium",
    val isLoading: Boolean = false,
    val error: String? = null,
    val titleError: String? = null,
    val isTaskAdded: Boolean = false
)

@HiltViewModel
class AddTaskViewModel @Inject constructor(
    private val addTaskUseCase: AddTaskUseCase,
    private val savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val _state = MutableStateFlow(AddTaskState())
    val state = _state.asStateFlow()

    private val projectId: String? = savedStateHandle.get("projectId")

    fun onTitleChanged(title: String) {
        _state.update { it.copy(title = title, titleError = null) }
    }

    fun onDescriptionChanged(description: String) {
        _state.update { it.copy(description = description) }
    }

    fun onDueDateChanged(date: Date) {
        _state.update { it.copy(dueDate = date) }
    }

    fun onPriorityChanged(priority: String) {
        _state.update { it.copy(priority = priority) }
    }

    fun addTask() {
        viewModelScope.launch {
            if (projectId == null) {
                _state.update { it.copy(error = "Project ID is missing.") }
                return@launch
            }
            if (_state.value.title.isBlank()) {
                _state.update { it.copy(titleError = "Title cannot be empty") }
                return@launch
            }

            _state.update { it.copy(isLoading = true) }

            val task = Task(
                id = "", // Generated by backend
                projectId = projectId,
                title = _state.value.title,
                description = _state.value.description,
                dueDate = _state.value.dueDate,
                priority = _state.value.priority,
                status = "TODO",
                isBlocked = false,
                createdAt = Date()
            )

            addTaskUseCase(task)
                .onSuccess {
                    _state.update { it.copy(isLoading = false, isTaskAdded = true) }
                }
                .onFailure { exception ->
                    _state.update { it.copy(isLoading = false, error = exception.message) }
                }
        }
    }

    fun clearError() {
        _state.update { it.copy(error = null) }
    }
}
